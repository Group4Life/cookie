{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"\ud83d\udc0d\ud83c\udf6a Group4Life Cookie <p>A Python Cookiecutter tailored towards Group4Life projects</p> <p> </p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Install the latest Cookiecutter</p> <pre><code>pip install -U cookiecutter\n</code></pre> <p>and generate a <code>Python</code> package project:</p> <pre><code>cookiecutter gh:Group4Life/cookiecutter-pypackage\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Dependency tracking using <code>Poetry</code>.</li> <li>Multi-version documentation extracted from source code provided by <code>MkDocs</code>, <code>mkdocstrings</code>, <code>Material for MkDocs</code> and <code>mike</code> and hosted on <code>GitHub Pages</code>.</li> <li>Automated dependency and security updates with <code>Renovate</code> and <code>Dependabot</code>.</li> <li>Formatting provided by <code>black</code> and <code>isort</code>.</li> <li>Testing setup with <code>pytest</code>.</li> <li>Coverage reports with <code>Coverage.py</code> and <code>Codecov</code>.</li> <li>Static type checking by <code>mypy</code>.</li> <li>Security checks with <code>CodeQL</code>.</li> <li>Linting provided by <code>Ruff</code>.</li> <li>Git hooks managed by <code>pre-commit</code>.</li> <li>Development tasks (lint, format, test, etc) provided by <code>Poe The Poet</code>.</li> <li>CI facilitated by <code>Github Actions</code>.</li> <li>Automated CHANGELOG generation, <code>GitHub releases</code> and <code>PyPI releases</code> facilitated by <code>Python Semantic Release</code>.</li> <li>Preview documentation changes introduced via a PR on <code>surge</code>.</li> <li>Automatically fix typos in your source code and documentation via <code>Misspell Fixer</code>.</li> <li>Beautiful <code>YAML issue templates</code>.</li> <li>Informative <code>PR template</code> and <code>Security Policy</code>.</li> <li>Add informative comments on issues &amp; PRs based on assigned labels using <code>Label Commenter</code>.</li> <li>Manage project labels with <code>GitHub Labeler</code>.</li> <li>Ready-to-use <code>.editorconfig</code> and <code>.gitignore</code>.</li> <li>Be always ready to code using <code>GitHub Codespaces</code>.</li> </ul> <p>The template supports Python 3.7 or higher.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Before contributing to the project, please go through the Contributing Guidelines first.</p> <p>The project's documentation can be found here.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>This project adheres to Semantic Versioning. See Conventional Commits for commit guidelines.</p>"},{"location":"CHANGELOG/#v101-2023-07-20","title":"v1.0.1 (2023-07-20)","text":""},{"location":"CHANGELOG/#fix","title":"Fix","text":"<ul> <li>Remove <code>license</code> related fields (<code>00f51d7</code>)</li> </ul> <p>See all commits in this version</p>"},{"location":"CHANGELOG/#v100-2023-07-20","title":"v1.0.0 (2023-07-20)","text":""},{"location":"CHANGELOG/#feature","title":"Feature","text":"<ul> <li>V1 (<code>6e35a34</code>)</li> <li>Initial commit (<code>850ee78</code>)</li> </ul>"},{"location":"CHANGELOG/#breaking","title":"Breaking","text":"<ul> <li>v1 (<code>6e35a34</code>)</li> </ul> <p>See all commits in this version</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting one of the project maintainers listed below. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#project-maintainers","title":"Project Maintainers","text":"<ul> <li>Vasilis Sioros &lt;billsioros97@gmail.com&gt;</li> </ul>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Hello and thank you for considering contributing to cookiecutter-pypackage!</p> <p>Reading and following these guidelines will help us make the contribution process easy and effective for everyone involved.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating and contributing to this project, you agree to uphold our Code of Conduct.</p>"},{"location":"CONTRIBUTING/#getting-help","title":"Getting Help","text":"<p>In case all you need is an answer to a question, please refrain from opening an issue and instead visit the project's discussion page.</p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":"<p>Contributions are made to this repository via Issues and Pull Requests (PRs). A few general guidelines that cover both:</p> <ul> <li>Search for existing Issues and PRs before creating your own.</li> <li>We work hard to make sure issues are handled in a timely manner but, depending on the impact, it could take a while to investigate the root cause. A friendly ping in the comment thread to the submitter or a contributor can help draw attention if your issue is blocking.</li> </ul>"},{"location":"CONTRIBUTING/#issues","title":"Issues","text":"<p>Issues should be used to report problems with the library or request a new feature or documentation change. When you create a new Issue, a template will be loaded that will guide you through collecting and providing the required information.</p> <p>If you find an Issue that addresses the problem you're having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help in indicating to our maintainers that a particular problem is affecting more than just the reporter.</p>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>PRs can be a quick way to get your fix or improvement slated for the next release. In general, PRs should:</p> <ul> <li>Only fix/add the functionality in question OR address wide-spread whitespace/style issues, not both.</li> <li>Address a single concern in the least number of changed lines as possible.</li> <li>Be accompanied by a complete Pull Request template (loaded automatically when a PR is created).</li> <li>Add unit or integration tests for added or changed functionality.</li> <li>Any code related changes should be accompanied by corresponding changes to the project's documentation.</li> <li>If your pull request introduces a new feature, the corresponding <code>README</code> section must be updated to reflect this.</li> <li>Write clear, concise commit message(s) using the Conventional Commits format. Why?</li> <li>This project only accepts pull requests related to open issues. In case there is no relevant open issue, feel free to create one.</li> </ul> <p>For changes that address core functionality or would require breaking changes (e.g. a major release), it's best to open an Issue to discuss your proposal first. This is not required but can save time creating and reviewing changes.</p> <p>In general, we follow the \"fork-and-pull\" Git workflow</p> <ol> <li>Fork the repository to your own Github account</li> <li>Clone the project to your machine</li> <li>Create a branch locally with a succinct but descriptive name</li> <li>Commit changes to the branch</li> <li>Push changes to your fork</li> <li>Open a PR in our repository and follow the PR template so that we can efficiently review the changes</li> </ol>"},{"location":"CONTRIBUTING/#setting-up-a-local-development-environment","title":"Setting up a local development environment","text":"<p>The following sections assume that you have already locally cloned the repository.</p>"},{"location":"CONTRIBUTING/#installing-poetry","title":"Installing Poetry","text":"<p>The cookiecutter-pypackage project utilizes the Poetry Python package manager. Having installed Poetry in the global namespace you may now run <code>poetry shell</code> to create a brand new virtual environment and <code>poetry install</code>, in order to install the project's dependencies (development dependencies as well).</p>"},{"location":"CONTRIBUTING/#installing-pre-commit-hooks","title":"Installing pre-commit hooks","text":"<p>The project utilizes the pre-commit framework. Having created a virtual environment and installed the required dependencies, you may run <code>pre-commit install --install-hooks</code> to install the git hook scripts.</p>"},{"location":"CONTRIBUTING/#testing-via-pytest","title":"Testing via <code>pytest</code>","text":"<p>We are using pytest to automate testing on multiple environments.</p> <p>The test suite can be run using <code>poetry run poe test</code>.</p>"},{"location":"CONTRIBUTING/#optional-installing-pyenv","title":"(Optional) Installing pyenv","text":"<p>pyenv is used, in the context of the cookiecutter-pypackage project, in order to determine the project's compatibility with various versions of Python. Installing <code>pyenv</code> is not strictly required, but it is recommended.</p> <p>Having installed <code>pyenv</code> in the global namespace, you may now run the following snippet, in order to install Python 3.7, 3.8 and 3.9, which, at the time of writing this document, are the only Python versions, supported by cookiecutter-pypackage.</p> <pre><code>pyenv install 3.7.10 3.8.9 3.9.4\npyenv local 3.7.10 3.8.9 3.9.4\n</code></pre> <p>Feel free to read more about using <code>pyenv</code>, in the context of <code>poetry</code>, here.</p>"},{"location":"CONTRIBUTING/#performing-development-operations-via-poethepoet","title":"Performing development operations via <code>poethepoet</code>","text":"<p>We are using poethepoet, to perform various development oriented tasks.</p> <p>Formatting, type-checking, running the test suite, as well as a few other operations, can be performed by running <code>poe &lt;task&gt;</code>. Please run <code>poe --help</code> (or <code>poetry run poe --help</code>), to list all available operations.</p>"},{"location":"CONTRIBUTING/#documenting-your-changes","title":"Documenting your changes","text":"<p>cookiecutter-pypackage utilizes MkDocs to build and deploy its documentation to GitHub Pages. The documentation is auto-generated from the python docstrings throughout the source code. As a result, any code related change should be accompanied by a corresponding change to the method's / class's docstring.</p> <p>Having made your changes, please run <code>poe docs</code> and make sure that no error is being raised on build time. Afterwards, open <code>http://localhost:8000/</code> in your browser of choice and make sure that the documentation renders correctly.</p>"},{"location":"CONTRIBUTING/#writing-your-commit-message","title":"Writing your commit message","text":"<p>The project's version number and Changelog, depend on a consistent commit history. As a result, your commit message's format is extremely important. Before opening a pull request, please make sure that your commits strictly follow the Conventional Commits format].</p>"},{"location":"CONTRIBUTING/#creating-a-pull-request","title":"Creating a pull request","text":"<p>Make sure you review our Pull Request Guidelines, before initiating a PR.</p>"},{"location":"LICENSE/","title":"License","text":"<p>Copyright (C) Group4Life, Inc - All Rights Reserved Unauthorized copying of this file, via any medium is strictly prohibited Proprietary and confidential Written by Vassileios Sioros billsioros97@gmail.com, July 2023</p>"}]}